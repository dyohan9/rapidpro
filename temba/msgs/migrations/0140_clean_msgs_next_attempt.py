# Generated by Django 2.2.4 on 2020-05-07 18:56

from django.db import migrations, models

BATCH_SIZE = 5000


def _bulk_update(apps, query, using: str, get_next_attempts, log_msg: str, fields: list = None):  # pragma: no cover
    def process():
        nonlocal total
        counter = 0
        for counter, msg in enumerate(batch, 1):
            msg.next_attempt = get_next_attempts(msg)
            yield msg
        total += counter

    fields = (fields or []) + ["pk"]
    total = 0
    Msg = apps.get_model("msgs", "Msg")
    queryset = Msg.objects.using(using).only(*fields).order_by("pk")
    batch = queryset.filter(query)[:BATCH_SIZE]
    print("")
    while batch:
        Msg.objects.using(using).bulk_update(process(), fields=["next_attempt"])
        batch = queryset.filter(query)[:BATCH_SIZE]
        print(f"   > {log_msg % total}")


def msg_next_attempt_clean(apps, schema_editor=None):  # pragma: no cover
    from temba.channels.types.android import AndroidType
    from temba.msgs.models import ERRORED

    msg = "Updated %d msgs.Msg with NULL next_attempt"
    query = models.Q(
        ~models.Q(status=ERRORED) | models.Q(channel__channel_type=AndroidType.code), next_attempt__isnull=False
    )
    _bulk_update(apps, query, schema_editor and schema_editor.connection.alias, lambda m: None, msg)


def reverse_msg_next_attempt(apps, schema_editor=None):  # pragma: no cover
    msg = "Updated %d msgs.Msg with NULL next_attempt"
    _bulk_update(
        apps,
        models.Q(next_attempt__isnull=True),
        schema_editor and schema_editor.connection.alias,
        lambda m: m.created_on,
        msg,
        ["created_on"],
    )


def apply_manual():  # pragma: no cover
    from django.apps import apps

    msg_next_attempt_clean(apps)


class Migration(migrations.Migration):

    dependencies = [("msgs", "0139_msgs_next_attempt_null")]

    operations = [migrations.RunPython(msg_next_attempt_clean, reverse_msg_next_attempt)]
