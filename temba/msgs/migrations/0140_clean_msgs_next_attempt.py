# Generated by Django 2.2.4 on 2020-05-07 18:56

from django.db import migrations, models, transaction

BATCH_SIZE = 5000


def _update_msg_next_attempt(msgs, using, func, log_msg):
    total = 0
    batch = msgs[:BATCH_SIZE]
    while batch:
        count = 0
        with transaction.atomic(using):
            for count, msg in enumerate(batch, 1):
                msg.next_attempt = func(msg)
                msg.save(update_fields=["next_attempt"], using=using)
        total += count
        batch = msgs[total : total + BATCH_SIZE]
        print(log_msg % count)


def msg_next_attempt_clean(apps, schema_editor):
    from temba.channels.types.android import AndroidType
    from temba.msgs.models import ERRORED

    Msg = apps.get_model("msgs", "Msg")
    db = schema_editor.connection.alias

    msgs = (
        Msg.objects.using(db)
        .filter(
            ~models.Q(status=ERRORED) | models.Q(channel__channel_type=AndroidType.code), next_attempt__isnull=False
        )
        .only("id", "next_attempt")
        .order_by("id")
    )

    _update_msg_next_attempt(msgs, db, lambda msg: None, " > Updated %d msgs.Msg with NULL next_attempt")


def reverse_msg_next_attempt(apps, schema_editor):
    Msg = apps.get_model("msgs", "Msg")
    db = schema_editor.connection.alias
    msgs = Msg.objects.using(db).filter(next_attempt__isnull=True).only("id", "created_on").order_by("id")
    _update_msg_next_attempt(msgs, db, lambda msg: msg.created_on, " > Updated %d msgs.Msg with NULL next_attempt")


class Migration(migrations.Migration):

    dependencies = [("msgs", "0139_msgs_next_attempt_null")]

    operations = [migrations.RunPython(msg_next_attempt_clean, reverse_msg_next_attempt)]
